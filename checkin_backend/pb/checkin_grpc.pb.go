// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: pb/checkin.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CheckinServiceClient is the client API for CheckinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckinServiceClient interface {
	// 用户签到
	UserCheckin(ctx context.Context, in *UserCheckinRequest, opts ...grpc.CallOption) (*UserCheckinResponse, error)
	// 获取签到状态
	GetCheckinStatus(ctx context.Context, in *CheckinStatusRequest, opts ...grpc.CallOption) (*CheckinStatusResponse, error)
}

type checkinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckinServiceClient(cc grpc.ClientConnInterface) CheckinServiceClient {
	return &checkinServiceClient{cc}
}

func (c *checkinServiceClient) UserCheckin(ctx context.Context, in *UserCheckinRequest, opts ...grpc.CallOption) (*UserCheckinResponse, error) {
	out := new(UserCheckinResponse)
	err := c.cc.Invoke(ctx, "/pb.CheckinService/UserCheckin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkinServiceClient) GetCheckinStatus(ctx context.Context, in *CheckinStatusRequest, opts ...grpc.CallOption) (*CheckinStatusResponse, error) {
	out := new(CheckinStatusResponse)
	err := c.cc.Invoke(ctx, "/pb.CheckinService/GetCheckinStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckinServiceServer is the server API for CheckinService service.
// All implementations must embed UnimplementedCheckinServiceServer
// for forward compatibility
type CheckinServiceServer interface {
	// 用户签到
	UserCheckin(context.Context, *UserCheckinRequest) (*UserCheckinResponse, error)
	// 获取签到状态
	GetCheckinStatus(context.Context, *CheckinStatusRequest) (*CheckinStatusResponse, error)
	mustEmbedUnimplementedCheckinServiceServer()
}

// UnimplementedCheckinServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCheckinServiceServer struct {
}

func (UnimplementedCheckinServiceServer) UserCheckin(context.Context, *UserCheckinRequest) (*UserCheckinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCheckin not implemented")
}
func (UnimplementedCheckinServiceServer) GetCheckinStatus(context.Context, *CheckinStatusRequest) (*CheckinStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckinStatus not implemented")
}
func (UnimplementedCheckinServiceServer) mustEmbedUnimplementedCheckinServiceServer() {}

// UnsafeCheckinServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckinServiceServer will
// result in compilation errors.
type UnsafeCheckinServiceServer interface {
	mustEmbedUnimplementedCheckinServiceServer()
}

func RegisterCheckinServiceServer(s grpc.ServiceRegistrar, srv CheckinServiceServer) {
	s.RegisterService(&CheckinService_ServiceDesc, srv)
}

func _CheckinService_UserCheckin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCheckinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckinServiceServer).UserCheckin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CheckinService/UserCheckin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckinServiceServer).UserCheckin(ctx, req.(*UserCheckinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckinService_GetCheckinStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckinStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckinServiceServer).GetCheckinStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CheckinService/GetCheckinStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckinServiceServer).GetCheckinStatus(ctx, req.(*CheckinStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CheckinService_ServiceDesc is the grpc.ServiceDesc for CheckinService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CheckinService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CheckinService",
	HandlerType: (*CheckinServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserCheckin",
			Handler:    _CheckinService_UserCheckin_Handler,
		},
		{
			MethodName: "GetCheckinStatus",
			Handler:    _CheckinService_GetCheckinStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/checkin.proto",
}
